name: 编译指定设备OpenWrt固件
run-name: ${{ inputs.release == 'true' && '发布' || '编译' }} - ${{ inputs.model }}

on:
  workflow_dispatch:
    inputs:
      model:
        required: true
        description: 选择设备型号
        type: choice
        default: jdcloud_ipq60xx_immwrt
        options:
          - 360v6_ipq60xx_libwrt
          - cmcc_rax3000m_immwrt
          - jdcloud_ipq60xx_immwrt
          - jdcloud_ipq60xx_libwrt
      release:
        required: true
        description: 是否发布到Release
        type: boolean
        default: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TZ: Asia/Shanghai
  FIRMWARE_DIR: ./firmware  # 统一固件目录变量

jobs:
  build-firmware:
    runs-on: ubuntu-24.04
    permissions:
      contents: write  # 明确授予发布权限
    steps:
      - name: 释放磁盘空间
        uses: sbwml/actions@free-disk

      - name: 初始化编译环境
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置构建信息
        run: |
          # 生成唯一构建时间戳，添加随机字符串确保Tag唯一性
          export BUILD_DATE=$(date +"%y.%m.%d_%H.%M.%S")_$(head -c 4 /dev/urandom | xxd -p)
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          # 从配置文件获取源码地址
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ inputs.model }}.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV
          # 创建固件目录（确保存在）
          mkdir -p $FIRMWARE_DIR

      - name: 预克隆依赖
        run: ./pre_clone_action.sh ${{ inputs.model }}

      - name: 缓存编译依赖
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ runner.os }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('**/repo_flag') }}-

      - name: 刷新缓存时间戳
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: 编译固件
        run: ./build.sh ${{ inputs.model }}

      - name: 验证固件生成
        run: |
          echo "检查固件目录内容:"
          ls -la $FIRMWARE_DIR
          # 检查是否有固件文件生成
          if [ -z "$(ls -A $FIRMWARE_DIR)" ]; then
            echo "错误: 固件目录为空，编译可能失败"
            exit 1
          fi

      - name: 获取内核版本
        run: |
          KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")
          echo "KVER=$KVER" >> $GITHUB_ENV

      - name: 清理旧缓存
        run: |
          gh cache list --key ${{ runner.os }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          echo "========缓存状态========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: 输出系统信息
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_DATE }}_${{ inputs.model }}
          path: ${{ env.FIRMWARE_DIR }}/*.*

      - name: 准备发布内容
        if: inputs.release == 'true'
        run: |
          # 创建发布描述文件，增加错误处理
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "内核版本：${{ env.KVER || '未知' }}" >> release_body.txt
          echo "WiFi密码：12345678" >> release_body.txt
          echo "LAN地址：192.168.2.1" >> release_body.txt
          echo "包含插件：" >> release_body.txt
          
          # 安全处理manifest文件查找
          if ls $FIRMWARE_DIR/*.manifest 1> /dev/null 2>&1; then
            grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" $FIRMWARE_DIR/*.manifest | awk -F":" '{print $NF}' >> release_body.txt
          else
            echo "未找到插件清单文件" >> release_body.txt
          fi
          
          # 显示生成的发布内容用于调试
          echo "发布内容如下："
          cat release_body.txt

      - name: Release Firmware
        # 创建GitHub Release并上传固件文件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}_${{ inputs.model }}  # 发布标签（包含日期和设备型号）
          # 根据设备型号选择不同的文件路径：n1_immwrt使用打包输出路径，其他使用默认固件目录
          files: ${{ inputs.model == 'n1_immwrt' && env.PACKAGED_OUTPUTPATH || './firmware' }}/*.*
          body_path: ./release_body.txt  # 发布说明文件路径
