name: 编译指定设备OpenWrt固件  # 工作流名称
run-name: Build - ${{ inputs.model }}  # 运行名称，包含选择的设备型号

# 触发条件：手动触发工作流
on:
  workflow_dispatch:
    inputs:
      model:  # 设备型号输入参数
        required: true  # 必选参数
        description: 选择设备型号  # 参数描述
        type: choice  # 类型为下拉选择
        default: jdcloud_ipq60xx_immwrt  # 默认值
        options:  # 可选设备型号列表
          - cmcc_rax3000m_immwrt
          - jdcloud_ipq60xx_immwrt
          - jdcloud_ipq60xx_libwrt
          - 360v6_ipq60xx_libwrt
      release:  # 新增：是否发布到Release的选项
        required: true  # 必选参数
        description: 是否发布到Release  # 参数描述
        type: boolean  # 类型为布尔值
        default: true  # 默认值为true


# 环境变量配置
env:
  # GitHub令牌，用于访问GitHub API（自动从仓库密钥获取）
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# 任务定义
jobs:
  build:
    # 矩阵策略：指定运行的操作系统
    strategy:
      matrix:
        os: [ubuntu-24.04]  # 使用Ubuntu 24.04作为编译环境
    # 运行在指定的操作系统上
    runs-on: ${{ matrix.os }}

    # 步骤列表：按顺序执行的操作
    steps:
      - name: Free disk space
        # 释放磁盘空间（编译需要较大空间）
        uses: sbwml/actions@free-disk

      - name: Build System Setup
        # 配置编译所需的系统环境
        run: |
          # 执行OpenWrt官方环境初始化脚本
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          # 安装必要工具：dos2unix（文本格式转换）
          sudo -E apt -yqq install dos2unix
          # 安装fuse开发库
          sudo -E apt -yqq install libfuse-dev
          # 清理系统无用包和缓存，释放空间
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          # 重新加载系统服务配置
          sudo -E systemctl daemon-reload

      - name: Checkout
        # 拉取当前代码仓库到工作目录
        uses: actions/checkout@v4

      - name: Set Build Date and Timezone
        # 设置编译日期和时区
        run: |
          # 设置系统时区为上海
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          # 生成编译日期（格式：年.月.日_时.分.秒，UTC+8时区）
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          # 将编译日期存入环境变量，供后续步骤使用
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          # 从配置文件中提取源码仓库URL
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ inputs.model }}.ini")
          # 将源码仓库URL存入环境变量
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV

      - name: Pre Clone
        # 执行预克隆操作（根据设备型号准备源码）
        run: ./pre_clone_action.sh ${{ inputs.model }}

      - name: Cache Dependencies
        # 缓存编译依赖，加速后续构建
        uses: actions/cache@v4
        with:
          # 缓存路径：ccache（编译缓存）和staging_dir（临时文件目录）
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          # 缓存键：包含操作系统、代码哈希和编译日期，确保缓存唯一性
          key: ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          # 恢复缓存的备选键（用于命中历史缓存）
          restore-keys: |
            ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}-

      - name: Refresh the cache
        # 刷新缓存文件的时间戳，避免因文件过时而重新编译
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            # 查找所有非目标设备的stamp目录并更新文件时间
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: Build Firmware
        # 执行固件编译脚本，传入选择的设备型号
        run: ./build.sh ${{ inputs.model }}

      - name: Get Kernel Verion
        # 获取内核版本并存入环境变量
        run: |
          # 从下载目录中提取最新的内核版本号（4.x/5.x/6.x系列）
          echo "KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")" >> $GITHUB_ENV

      - name: Delete Old Cache
        # 删除旧的缓存，释放存储空间
        run: |
          # 使用GitHub CLI列出匹配的缓存并删除
          gh cache list --key ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出当前缓存占用空间
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: Machine Information
        # 输出机器信息（用于调试和资源监控）
        run: |
          echo "=============================================="
          # 输出CPU信息（名称、核心数、线程数）
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          # 输出磁盘使用情况
          df -h
          echo "=============================================="

      - name: Package OpenWrt Firmware
        # 仅对n1_immwrt型号进行固件打包（使用专用打包工具）
        if: ${{ inputs.model == 'n1_immwrt' }}
        uses: unifreq/openwrt_packit@master
        env:
          OPENWRT_ARMVIRT: firmware/*.tar.gz  # 输入的虚拟机镜像文件
          PACKAGE_SOC: s905d  # 芯片型号
          KERNEL_VERSION_NAME: 6.6.y  # 内核版本
          WHOAMI: ZqinKing  # 打包者信息

      - name: Prepare Release Body
        # 生成发布说明内容
        run: |
          # 创建发布说明文件
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt  # 源码地址
          echo "Kernel: ${{ env.KVER }}" >> release_body.txt  # 内核版本
          echo "WIFI密码: #######" >> release_body.txt  # 默认WiFi密码
          echo "LAN地址: 192.168.2.1" >> release_body.txt  # 默认管理地址
          echo "插件：" >> release_body.txt
          # 从固件清单中提取包含的插件列表
          echo "$(grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ./firmware/*.manifest | awk -F":" '{print $NF}')"  >> release_body.txt

      - name: Release Firmware
        # 创建GitHub Release并上传固件文件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}_${{ inputs.model }}  # 发布标签（包含日期和设备型号）
          # 根据设备型号选择不同的文件路径：n1_immwrt使用打包输出路径，其他使用默认固件目录
          files: ${{ inputs.model == 'n1_immwrt' && env.PACKAGED_OUTPUTPATH || './firmware' }}/*.*
          body_path: ./release_body.txt  # 发布说明文件路径

