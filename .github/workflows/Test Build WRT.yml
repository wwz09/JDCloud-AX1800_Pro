name: Test Build WRT
run-name: Build - ${{ inputs.model }}

on:
  workflow_dispatch:
    inputs:
      model:
        required: true
        description: Device Model
        type: choice
        default: jdcloud_ipq60xx_immwrt
        options:
          - cmcc_rax3000m_immwrt
          - jdcloud_ipq60xx_immwrt
          - jdcloud_ipq60xx_libwrt
          - qihoo_360v6_immwrt
  

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BUILD_SRC: ImmortalWRT
  KVER: 5.4

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-24.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Free disk space
        uses: sbwml/actions@free-disk

      - name: Build System Setup
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Build Date and Timezone
        run: |
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export SHORT_DATE=$(TZ=UTC-8 date +"%y%m%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "SHORT_DATE=$SHORT_DATE" >> $GITHUB_ENV

      - name: Pre Clone
        run: ./pre_clone_action.sh ${{ inputs.model }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}-

      - name: Refresh the cache
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: Build Firmware
        run: ./build.sh ${{ inputs.model }}

      - name: Generate Configuration Summary
        run: |
          # 创建firmware目录（如果不存在）
          mkdir -p ./firmware
          
          # 输出配置文件到firmware目录 - 使用find确保正确检查文件存在
          config_file=$(find ./action_build/bin/targets -name "*.config" 2>/dev/null | head -n 1)
          if [ -n "$config_file" ]; then
            cp "$config_file" ./firmware/config.txt
            echo "已复制配置文件: $config_file -> ./firmware/config.txt"
          else
            echo "警告: 未找到配置文件" > ./firmware/config.txt
          fi
          
          # 生成LUCI插件列表 - 改进格式和错误处理
          { 
            echo "## 编译到固件的LUCI插件列表"
            echo "生成时间: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "设备型号: ${{ inputs.model }}"
            echo ""  
            
            # 优先从manifest文件获取插件信息
            manifest_file=$(find ./firmware -name "*.manifest" 2>/dev/null | head -n 1)
            if [ -n "$manifest_file" ]; then
              echo "### 从固件清单中提取的插件（已安装到固件）:" 
              echo ""  
              grep -oP "luci-app(-[a-zA-Z0-9_]{1,}){1,}" "$manifest_file" | sort | uniq
              echo ""  
            fi
            
            # 同时从IPK文件获取可用插件列表
            if [ -d "./action_build/bin/targets" ]; then
              echo "### 编译生成的插件IPK包:" 
              echo ""  
              find ./action_build/bin/targets -name "*.ipk" | grep -i luci | sed 's/.*\///' | sort
            else
              echo "未找到编译好的IPK包目录"
            fi
          } > ./firmware/luci_plugins.md
          
          # 精减固件名称 - 直接使用设备名命名（无需切换目录）
          for file in ./firmware/*.*; do
            # 只处理文件，不处理目录
            [ -f "$file" ] || continue
            
            # 获取文件名（不含路径）
            filename=$(basename "$file")
            
            # 跳过已生成的配置文件和插件列表
            if [[ "$filename" != "config.txt" && "$filename" != "luci_plugins.md" ]]; then
              # 获取文件扩展名
              extension="${filename##*.}"
              # 直接使用设备名命名
              new_name="./firmware/${{ inputs.model }}.$extension"
              
              # 避免文件覆盖
              if [ "$file" != "$new_name" ]; then
                mv "$file" "$new_name"
                echo "重命名固件: $filename -> ${{ inputs.model }}.$extension"
              fi
            fi
          done

      - name: Delete Old Cache
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SHORT_DATE }}_${{ inputs.model }}
          path: ./firmware/*.*
          retention-days: 90
          
      - name: Prepare Release Body
        run: |
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "Kernel: ${{ env.KVER }}" >> release_body.txt
          echo "WIFI密码: " >> release_body.txt
          echo "LAN地址: 192.168.2.1" >> release_body.txt
          echo "插件：" >> release_body.txt
          echo "$(grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ./firmware/*.manifest | awk -F":" '{print $NF}')" >> release_body.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.SHORT_DATE }}_${{ inputs.model }}
          name: ${{ inputs.model }} - ${{ env.SHORT_DATE }}
          body_path: release_body.txt
          draft: false
          prerelease: false
          files: ./firmware/*.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
