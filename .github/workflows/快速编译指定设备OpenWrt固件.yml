name: 快速编译指定设备OpenWrt固件
run-name: ${{ inputs.release == 'true' && '发布' || '编译' }} - ${{ inputs.model }}

on:
  workflow_dispatch:
    inputs:
      model:
        required: true
        description: 选择设备型号
        type: choice
        default: jdcloud_ipq60xx_immwrt
        options:
          - 360v6_ipq60xx_libwrt
          - cmcc_rax3000m_immwrt
          - jdcloud_ipq60xx_immwrt
          - jdcloud_ipq60xx_libwrt
      release:
        required: true
        description: 是否发布到Release
        type: boolean
        default: true
      clean_build:
        required: false
        description: 是否清理后全量编译（不使用增量编译）
        type: boolean
        default: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TZ: Asia/Shanghai
  # 编译并行任务数（根据CPU核心数自动调整）
  MAKE_JOBS: $(( $(nproc) + 1 ))
  # 缓存保留数量
  CACHE_RETENTION_COUNT: 3

jobs:
  build-firmware:
    runs-on: ubuntu-24.04
    steps:
      - name: 释放磁盘空间
        uses: sbwml/actions@free-disk
        with:
          # 只使用该动作支持的参数
          root-reserve-gb: 10
          swap-size-gb: 16

      - name: 额外清理空间（补充步骤）
        run: |
          # 手动执行额外清理操作
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /var/cache/apt/archives/*.deb
          sudo rm -rf /usr/share/swift
          # 清理Docker镜像释放更多空间
          sudo docker system prune -af

      - name: 初始化编译环境（加速版）
        run: |
          # 使用更快的源并并行安装
          sudo sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list
          sudo apt update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -yqq install \
            dos2unix libfuse-dev build-essential clang flex bison g++ gawk \
            gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils \
            rsync unzip zlib1g-dev file wget qemu-utils
          # 清理系统垃圾
          sudo apt -yqq autoremove --purge
          sudo apt -yqq autoclean
          sudo apt -yqq clean

      - name: 检出代码（浅克隆）
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 只拉取最新提交，加快克隆速度

      - name: 设置构建信息
        run: |
          export BUILD_DATE=$(date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ inputs.model }}.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV
          # 生成设备特定缓存键，包含核心配置文件
          export CACHE_KEY_BASE="${{ runner.os }}-${{ inputs.model }}-${{ hashFiles('**/repo_flag', './compilecfg/*.ini', './build.sh') }}"
          echo "CACHE_KEY_BASE=$CACHE_KEY_BASE" >> $GITHUB_ENV
          # 输出CPU核心数和并行任务数
          echo "CPU核心数: $(nproc)"
          echo "并行编译任务数: $MAKE_JOBS"

      - name: 预克隆依赖（使用加速镜像）
        run: |
          # 设置Git镜像加速
          git config --global url."https://hub.fastgit.xyz/".insteadOf https://github.com/
          git config --global url."https://mirror.ghproxy.com/https://github.com/".insteadOf https://github.com/
          ./pre_clone_action.sh ${{ inputs.model }}

      - name: 扩展缓存编译依赖
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
            ./action_build/dl
            ./action_build/feeds
            ./action_build/package/feeds
            ./action_build/tmp
            !./action_build/tmp/dl
          key: ${{ env.CACHE_KEY_BASE }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ env.CACHE_KEY_BASE }}-

      - name: 刷新缓存时间戳
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi
          if [ -d "./action_build/feeds" ]; then
            find "./action_build/feeds" -type f -exec touch {} +
          fi

      - name: 清理全量编译（如果需要）
        if: inputs.clean_build == true
        run: |
          echo "执行全量编译，清理现有构建文件..."
          rm -rf ./action_build/build_dir
          rm -rf ./action_build/bin

      - name: 编译固件（加速参数）
        run: |
          # 导出加速编译参数
          export MAKEFLAGS="-j$MAKE_JOBS -l$(nproc)"
          export CCACHE_SLOPPINESS=time_macros
          export CCACHE_COMPRESS=1
          export CCACHE_MAXSIZE=5G
          # 执行编译并输出详细进度
          ./build.sh ${{ inputs.model }} | tee build.log

      - name: 获取内核版本
        run: |
          KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")
          echo "KVER=$KVER" >> $GITHUB_ENV

      - name: 智能清理旧缓存
        run: |
          echo "保留最新${{ env.CACHE_RETENTION_COUNT }}个缓存..."
          gh cache list --key ${{ env.CACHE_KEY_BASE }}- --json key,createdAt --jq '. | sort_by(.createdAt) | .[].key' > cache_keys.txt
          
          TOTAL_CACHES=$(wc -l < cache_keys.txt)
          CACHES_TO_DELETE=$((TOTAL_CACHES - ${{ env.CACHE_RETENTION_COUNT }}))
          
          if [ $CACHES_TO_DELETE -gt 0 ]; then
            head -n $CACHES_TO_DELETE cache_keys.txt | while read -r key; do
              gh cache delete "$key"
            done
          fi

      - name: 输出系统信息与编译统计
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="
          # 显示编译时间统计
          echo "编译时间统计:"
          grep -E "real|user|sys" build.log || true

      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_DATE }}_${{ inputs.model }}
          path: ./firmware/*.*
          retention-days: 7  # 缩短 artifacts 保留时间

      - name: 准备发布内容
        if: inputs.release == 'true'
        run: |
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "内核版本：${{ env.KVER }}" >> release_body.txt
          echo "WiFi密码：12345678" >> release_body.txt
          echo "LAN地址：192.168.2.1" >> release_body.txt
          echo "包含插件：" >> release_body.txt
          grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ./firmware/*.manifest | awk -F":" '{print $NF}' >> release_body.txt

      - name: 发布固件到Release
        if: inputs.release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}_${{ inputs.model }}
          files: ./firmware/*.*
          body_path: ./release_body.txt
          draft: false
          prerelease: false
