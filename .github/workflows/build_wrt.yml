name: Build WRT  # 工作流名称
run-name: Build - ${{ inputs.model }}  # 运行名称，包含选择的设备型号

# 触发条件：手动触发工作流
on:
  workflow_dispatch:
    inputs:
      model:  # 设备型号输入参数
        required: true  # 必选参数
        description: 选择设备型号  # 参数描述
        type: choice  # 类型为下拉选择
        default: jdcloud_ipq60xx_immwrt  # 默认值
        options:  # 可选设备型号列表
          - cmcc_rax3000m_immwrt
          - jdcloud_ipq60xx_immwrt
          - jdcloud_ipq60xx_libwrt
          - 360v6_ipq60xx_libwrt
      release:  # 新增：是否发布到Release的选项
        required: true  # 必选参数
        description: 是否发布到Release  # 参数描述
        type: boolean  # 类型为布尔值
        default: true  # 默认值为true


# 环境变量设置
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub 令牌，用于操作API

# 定义作业
jobs:
  build:  # 构建作业
    strategy:
      matrix:
        os: [ubuntu-24.04]  # 运行的操作系统
    runs-on: ${{ matrix.os }}  # 使用矩阵中定义的操作系统

    steps:  # 步骤列表
      - name: Free disk space  # 释放磁盘空间
        uses: sbwml/actions@free-disk  # 使用第三方Action释放磁盘空间

      - name: Build System Setup  # 构建系统环境设置
        run: |  # 执行一系列命令
          # 安装 ImmortalWRT 构建环境
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          # 安装所需工具
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          # 清理系统
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload

      - name: 检出代码
        uses: actions/checkout@v4  # 使用官方Action检出当前仓库代码

      - name: 设置构建日期和时区
        run: |
          # 设置时区为上海
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          # 生成构建日期（UTC+8时区）并设置为环境变量
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      - name: 预克隆操作
        run: ./pre_clone_action.sh ${{ inputs.model }}  # 执行预克隆脚本，传入设备型号参数

      - name: 缓存依赖项
        uses: actions/cache@v4  # 使用官方缓存Action
        with:
          path: |  # 缓存路径
            ./action_build/.ccache
            ./action_build/staging_dir
          # 缓存键，包含操作系统、仓库哈希和构建日期
          key: ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          # 恢复缓存的备选键
          restore-keys: |
            ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}-

      - name: 刷新缓存
        run: |
          # 如果staging_dir目录存在，更新缓存时间戳
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: 构建固件
        run: ./build.sh ${{ inputs.model }}  # 执行构建脚本，传入设备型号参数

      - name: 删除旧缓存
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: 输出机器信息
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"  # 输出CPU信息
          echo "=============================================="
          df -h  # 输出磁盘使用情况
          echo "=============================================="

      - name: 上传固件作为工件
        uses: actions/upload-artifact@v4  # 使用官方上传工件Action
        with:
          name: ${{ env.BUILD_DATE }}_${{ inputs.model }}  # 工件名称，包含构建日期和设备型号
          path: ./firmware/*.*  # 要上传的固件路径

      - name: 准备发布说明
        run: |
          # 创建发布说明文件
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "Kernel: ${{ env.KVER }}" >> release_body.txt
          echo "WIFI密码: 12345678" >> release_body.txt
          echo "LAN地址: 192.168.2.1" >> release_body.txt
          echo "插件：" >> release_body.txt
          # 从manifest文件中提取插件信息
          echo "$(grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ./firmware/*.manifest | awk -F":" '{print $NF}')"  >> release_body.txt

      - name: 发布固件到Release
        uses: softprops/action-gh-release@v2  # 使用第三方发布Action

        with:
          tag_name: ${{ env.BUILD_DATE }}_${{ inputs.model }}  # 标签名称，包含构建日期和设备型号
          # 根据设备型号选择不同的文件路径
          files: ${{ inputs.model == 'n1_immwrt' && env.PACKAGED_OUTPUTPATH || './firmware' }}/*.*
          body_path: ./release_body.txt  # 发布说明文件路径

