name: Build WRT
run-name: Build - ${{ inputs.model }}

on:
  workflow_dispatch:
    inputs:
      model:
        required: true
        description: Device Model
        type: choice
        default: jdcloud_ipq60xx_immwrt
        options:
          - aliyun_ap8220_immwrt
          - cmcc_rax3000m_immwrt
          - jdcloud_ax6000_immwrt
          - jdcloud_ipq60xx_immwrt
          - jdcloud_ipq60xx_libwrt
          - redmi_ax5_immwrt
          - redmi_ax6_immwrt
          - redmi_ax6_libwrt
          - redmi_ax6000_immwrt21
          - zn_m2_immwrt
          - zn_m2_libwrt
          - x64_immwrt

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-24.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Free disk space
        uses: sbwml/actions@free-disk

      - name: Build System Setup
        uses: sbwml/actions@openwrt-build-setup

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Link Rust to system path
        run: |
          sudo mkdir -p /usr/local/bin
          sudo ln -s "$HOME/.cargo/bin/cargo" /usr/local/bin/cargo
          sudo ln -s "$HOME/.cargo/bin/rustup" /usr/local/bin/rustup

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Clang libraries
        run: sudo apt-get install -y libclang-dev

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Build Date and Timezone
        run: |
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      - name: Pre Clone
        run: ./pre_clone_action.sh ${{ inputs.model }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}-

      - name: Refresh the cache
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: Build Firmware
        run: ./build.sh ${{ inputs.model }}

      - name: Delete Old Cache
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_DATE }}_${{ inputs.model }}
          path: ./firmware/*.*
